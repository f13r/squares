{"version":3,"sources":["types.ts","Components/ViewSquare.tsx","Components/ViewBoard.tsx","utils.ts","App.tsx","theme.js","index.tsx"],"names":["Player","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","ViewSquare","props","classes","square","currentPlayer","changeColor","owner","Grid","item","Paper","className","onClick","style","backgroundColor","ViewBoard","field","container","justify","map","rows","index","key","generateField","size","id","i","row","j","push","findSiblingSquareToCheck","column","squares","calcResults","score","forEach","rowKey","columnKey","distance","checkSquare","visited","isVisited","length","filter","visitedSquare","existedSiblings","existedSibling","player1score","player2score","win","tie","avatar","margin","main","form","width","marginTop","submit","createMuiTheme","primary","error","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","initialState","fieldSize","fieldSizeError","One","result","dialogOpen","useState","state","setState","startGame","Container","component","Typography","variant","player","Two","gameIsFinished","isGameFinished","Dialog","onClose","open","DialogTitle","DialogContent","DialogContentText","TextField","label","type","value","onChange","event","Number","target","helperText","fullWidth","inputProps","min","max","step","Button","document","querySelector"],"mappings":"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","file":"static/js/main.8847de3c.chunk.js","sourcesContent":["export interface AppState {\n    field: Field;\n    fieldSize: number;\n    fieldSizeError: string;\n    currentPlayer: Player;\n    result: {\n        tie: boolean;\n        win: string;\n        score: number[];\n    };\n    dialogOpen: boolean;\n}\n\nexport interface Row extends Array<Square> {}\nexport interface Field extends Array<Row> {}\n\nexport enum Player {\n    One,\n    Two,\n}\n\nexport interface Square {\n    id: number;\n    owner?: Player;\n}\nexport interface SquarePosition {\n    row: number;\n    column: number;\n}\n\nexport type GenerateField = (size: number) => Field;\n\nexport type FindSiblingSquareToCheck = (field: Field, row: number, column: number, owner: Player) => Array<SquarePosition>;\n\nexport type CheckSquare = (field: Field, row: number, column: number, owner: Player, visited?: Array<SquarePosition>) => number;\n\nexport type IsVisited = (row: number, column: number) => boolean;\n\nexport type ChangeColor = (square: Square, player: Player) => () => void;\n","import React from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {SquareComponent} from \"./types\";\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(6),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\nconst ViewSquare: SquareComponent = (props) => {\n\n    const classes = useStyles();\n\n    const { square, currentPlayer, changeColor } = props;\n\n    let color = 'grey';\n\n    switch (square.owner) {\n        case 0:\n            color = 'green';\n            break;\n        case 1:\n            color = 'red';\n            break;\n        default:\n            break;\n    }\n\n    return (\n        <Grid item>\n            <Paper className={classes.paper} onClick={changeColor(square, currentPlayer)} style={{backgroundColor: color}}/>\n        </Grid>\n    )\n};\n\nexport default ViewSquare;\n","import React from 'react';\n\nimport {Grid} from \"@material-ui/core\";\nimport ViewSquare from \"./ViewSquare\";\nimport {BoardComponent} from \"./types\";\n\n\nconst ViewBoard: BoardComponent = (props) => {\n\n    const { field, currentPlayer, changeColor } = props;\n\n    return (\n        <>\n            <Grid container style={{padding: '15px 0 15px 0'}} justify=\"center\" spacing={10}>\n                <Grid item>\n                    <div style={{color: \"green\"}}>Player 1</div>\n                </Grid>\n                <Grid item>\n                    <div style={{color: \"red\"}}>Player 2</div>\n                </Grid>\n            </Grid>\n            {\n                field.map((rows, index) => {\n                    return (\n                        <Grid key={index} container justify=\"center\" spacing={1}>\n                            {\n                                rows.map((square, index) => {\n                                    return (\n                                        <ViewSquare key={index} square={square} currentPlayer={currentPlayer} changeColor={changeColor}/>\n                                    );\n                                })\n                            }\n                        </Grid>\n                    )\n                })\n            }\n        </>\n    );\n};\n\nexport default ViewBoard;\n","import {CheckSquare, Field, FindSiblingSquareToCheck, GenerateField, IsVisited, Square} from \"./types\";\n\nexport const generateField: GenerateField = (size): Field => {\n    const field: Field = [];\n\n    let id = 0;\n    for (let i = 0; i < size; i++) {\n        let row = [];\n        for (let j = 0; j < size; j++) {\n            const square: Square = { id };\n            row.push(square);\n            id++;\n\n        }\n        field.push(row);\n    }\n\n    return field;\n};\n\nexport const isGameFinished = (field: Field) => {\n    let gameIsFinished = true;\n\n    field.forEach(row => {\n        row.forEach(square => {\n            if (typeof square.owner === 'undefined') {\n                gameIsFinished = false;\n                return false;\n            }\n        });\n    });\n\n    return gameIsFinished;\n};\n\nconst findSiblingSquareToCheck: FindSiblingSquareToCheck = (field, row, column, owner ) => {\n    const squares = [];\n\n    if (field[row] && field[row][column]) {\n        if (field[row][column].owner === owner) {\n            squares.push(\n                {\n                    row,\n                    column: column,\n                }\n            )\n        }\n    }\n\n    if (field[row] && field[row][column - 1]) {\n        if (field[row][column - 1].owner === owner) {\n            squares.push(\n                {\n                    row,\n                    column: column - 1,\n                }\n            )\n        }\n    }\n\n    if (field[row] && field[row][column + 1]) {\n        if (field[row][column + 1].owner === owner) {\n            squares.push(\n                {\n                    row,\n                    column: column + 1,\n                }\n            )\n        }\n    }\n    if (field[row - 1] && field[row - 1][column]) {\n        if (field[row - 1][column].owner === owner) {\n            squares.push(\n                {\n                    row: row - 1,\n                    column,\n                }\n            )\n        }\n    }\n    if (field[row + 1] && field[row + 1][column]) {\n        if (field[row + 1][column].owner === owner) {\n            squares.push(\n                {\n                    row: row + 1,\n                    column,\n                }\n            )\n        }\n    }\n\n    return squares;\n};\n\n\nconst checkSquare: CheckSquare = (field, row, column, owner, visited= []) => {\n\n    const isVisited: IsVisited = (row, column) => {\n        if (visited.length) {\n            return !!visited.filter(visitedSquare => {\n                return visitedSquare.row === row && visitedSquare.column === column;\n            }).length;\n        }\n        return false;\n    };\n\n    const existedSiblings = findSiblingSquareToCheck(field, row, column, owner);\n\n    existedSiblings.forEach(existedSibling => {\n        const { row, column } = existedSibling;\n        if (!isVisited(row, column)) {\n            visited.push(existedSibling);\n            checkSquare(field, row, column, owner, visited);\n        }\n    });\n\n    return visited.length;\n};\n\nexport const calcResults = (field: Field) => {\n\n    const score = [0, 0];\n\n    field.forEach((row, rowKey) => {\n        row.forEach((column, columnKey) => {\n            if (typeof column.owner !== 'undefined') {\n                const distance = checkSquare(field, rowKey, columnKey, column.owner);\n                if (distance > score[column.owner]) {\n                    score[column.owner] = distance;\n                }\n            }\n        });\n    });\n\n    const [player1score, player2score] = score;\n\n    let win = '';\n    let tie = false;\n\n    if (player2score === player1score) {\n        tie = true;\n    }\n\n    if (!tie) {\n        win = player1score > player2score ? 'Player 1' : 'Player 2';\n    }\n\n    return {\n        win,\n        tie,\n        score\n    }\n};\n","import React, {ChangeEvent, useState} from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport ViewBoard from \"./Components/ViewBoard\";\nimport {calcResults, generateField, isGameFinished} from \"./utils\";\nimport {AppState, ChangeColor, Field, Player} from \"./types\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\n\nexport default function App() {\n\n    const initialState = {\n        field: {} as Field,\n        fieldSize: 3,\n        fieldSizeError: '',\n        currentPlayer: Player.One,\n        result: {\n            tie: false,\n            win: '',\n            score: [0, 0],\n        },\n        dialogOpen: false,\n    };\n\n    initialState.field = generateField(initialState.fieldSize);\n\n    const [state, setState ] = useState<AppState>(initialState);\n\n    const changeColor: ChangeColor = (square, player) => () => {\n        if (typeof square.owner === 'undefined') {\n            square.owner = player;\n            setState({\n                ...state,\n                currentPlayer: player === Player.One ? Player.Two : Player.One,\n            });\n\n            if (isGameFinished(state.field)) {\n                const result = calcResults(state.field);\n\n                setState({\n                    ...state,\n                    dialogOpen: true,\n                    result\n                })\n            }\n        }\n    };\n\n    const startGame = () => {\n        setState({\n            ...state,\n            dialogOpen: false,\n            currentPlayer: Player.One,\n            field: generateField(state.fieldSize),\n        })\n    };\n\n    const changeFieldSize = (event: ChangeEvent<HTMLInputElement>) => {\n        const fieldSize = Number(event.target.value);\n        if (fieldSize < 2 || fieldSize > 8) {\n            setState({\n                ...state,\n                fieldSizeError: 'Field size has to be between 2 and 8'\n            });\n        } else {\n            setState({\n                ...state,\n                fieldSize\n           });\n        }\n    };\n\n    const classes = useStyles();\n\n    return (\n        <Container component=\"main\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Squares\n                </Typography>\n                <ViewBoard field={state.field} currentPlayer={state.currentPlayer} changeColor={changeColor}/>\n                <Dialog\n                    onClose={startGame}\n                    open={state.dialogOpen}\n                >\n                    <DialogTitle>That's all folks!</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            <div style={{color: 'green'}}>Player 1 got {state.result.score[0]} squares </div>\n                            <div style={{color: 'red'}}>Player 2 got {state.result.score[1]} squares </div>\n                            <br/>\n                            <div>\n                                {state.result.tie && <div>It's a tie! Try again to find out who's better</div>}\n                                {!state.result.tie && <div><b>Congratulations! {state.result.win} wins!</b></div>}\n                            </div>\n                            <br/>\n                            <TextField\n                                margin=\"dense\"\n                                label=\"Field size\"\n                                type=\"number\"\n                                error={!!state.fieldSizeError.length}\n                                value={state.fieldSize}\n                                onChange={changeFieldSize}\n                                helperText={state.fieldSizeError}\n                                fullWidth\n                                inputProps={{min: \"2\", max: \"8\", step: \"1\"}}\n                            />\n                            <Button onClick={startGame} color=\"primary\">\n                                Start over!\n                            </Button>\n                        </DialogContentText>\n                    </DialogContent>\n                </Dialog>\n            </div>\n        </Container>\n    )\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}