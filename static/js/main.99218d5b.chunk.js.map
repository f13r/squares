{"version":3,"sources":["types.ts","Components/ViewSquare.tsx","Components/ViewBoard.tsx","utils.ts","Components/Dialog/Modal.tsx","Components/ViewNewGameForm.tsx","Components/Dialog/Content.tsx","App.tsx","theme.js","index.tsx"],"names":["Player","useStyles","makeStyles","theme","paper","padding","spacing","textAlign","color","palette","text","secondary","ViewSquare","props","classes","square","currentPlayer","changeColor","owner","Grid","item","Paper","className","onClick","style","backgroundColor","cursor","ViewBoard","field","container","justify","map","rows","index","key","generateField","size","id","i","row","j","push","findSiblingSquareToCheck","column","squares","calcResults","score","forEach","rowKey","columnKey","distance","checkSquare","visited","isVisited","length","filter","visitedSquare","existedSiblings","existedSibling","player1score","player2score","win","tie","Modal","startGame","dialogOpen","content","title","newGameForm","Dialog","onClose","open","DialogTitle","DialogContent","DialogContentText","ViewNewGameForm","fieldSizeError","fieldSize","changeFieldSize","TextField","margin","label","type","error","value","onChange","helperText","fullWidth","inputProps","min","max","step","DialogActions","Button","Content","isNewGame","result","avatar","main","form","width","marginTop","submit","createMuiTheme","primary","red","A400","background","default","ReactDOM","render","ThemeProvider","CssBaseline","initialState","One","useState","state","setState","Container","component","Typography","variant","player","Two","gameIsFinished","isGameFinished","event","Number","target","document","querySelector"],"mappings":"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","file":"static/js/main.99218d5b.chunk.js","sourcesContent":["export interface AppState {\n    field?: Field;\n    fieldSize: number;\n    fieldSizeError: string;\n    currentPlayer: Player;\n    result: {\n        tie: boolean;\n        win: string;\n        score: number[];\n    };\n    dialogOpen: boolean;\n    isNewGame: boolean;\n}\n\nexport interface Row extends Array<Square> {}\nexport interface Field extends Array<Row> {}\n\nexport enum Player {\n    One,\n    Two,\n}\n\nexport interface Square {\n    id: number;\n    owner?: Player;\n}\nexport interface SquarePosition {\n    row: number;\n    column: number;\n}\n\nexport type GenerateField = (size: number) => Field;\n\nexport type FindSiblingSquareToCheck = (field: Field, row: number, column: number, owner: Player) => Array<SquarePosition>;\n\nexport type CheckSquare = (field: Field, row: number, column: number, owner: Player, visited?: Array<SquarePosition>) => number;\n\nexport type IsVisited = (row: number, column: number) => boolean;\n\nexport type ChangeColor = (square: Square, player: Player) => () => void;\n","import React from \"react\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {SquareComponent} from \"./types\";\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(6),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n}));\n\nconst ViewSquare: SquareComponent = (props) => {\n\n    const classes = useStyles();\n\n    const { square, currentPlayer, changeColor } = props;\n\n    let color = 'grey';\n\n    switch (square.owner) {\n        case 0:\n            color = 'green';\n            break;\n        case 1:\n            color = 'red';\n            break;\n        default:\n            break;\n    }\n\n    return (\n        <Grid item>\n            <Paper className={classes.paper} onClick={changeColor(square, currentPlayer)} style={{backgroundColor: color, cursor: 'pointer'}}/>\n        </Grid>\n    )\n};\n\nexport default ViewSquare;\n","import React from 'react';\n\nimport {Grid} from \"@material-ui/core\";\nimport ViewSquare from \"./ViewSquare\";\nimport {BoardComponent} from \"./types\";\n\n\nconst ViewBoard: BoardComponent = (props) => {\n\n    const { field, currentPlayer, changeColor } = props;\n\n    return (\n        <>\n            <Grid container style={{padding: '15px 0 15px 0'}} justify=\"center\" spacing={10}>\n                <Grid item>\n                    <div style={{color: \"green\"}}>Player 1</div>\n                </Grid>\n                <Grid item>\n                    <div style={{color: \"red\"}}>Player 2</div>\n                </Grid>\n            </Grid>\n            {\n                field.map((rows, index) => {\n                    return (\n                        <Grid key={index} container justify=\"center\" spacing={1}>\n                            {\n                                rows.map((square, index) => {\n                                    return (\n                                        <ViewSquare key={index} square={square} currentPlayer={currentPlayer} changeColor={changeColor}/>\n                                    );\n                                })\n                            }\n                        </Grid>\n                    )\n                })\n            }\n        </>\n    );\n};\n\nexport default ViewBoard;\n","import {CheckSquare, Field, FindSiblingSquareToCheck, GenerateField, IsVisited, Square} from \"./types\";\n\nexport const generateField: GenerateField = (size): Field => {\n    const field: Field = [];\n\n    let id = 0;\n    for (let i = 0; i < size; i++) {\n        let row = [];\n        for (let j = 0; j < size; j++) {\n            const square: Square = { id };\n            row.push(square);\n            id++;\n\n        }\n        field.push(row);\n    }\n\n    return field;\n};\n\nexport const isGameFinished = (field: Field) => {\n    let gameIsFinished = true;\n\n    field.forEach(row => {\n        row.forEach(square => {\n            if (typeof square.owner === 'undefined') {\n                gameIsFinished = false;\n                return false;\n            }\n        });\n    });\n\n    return gameIsFinished;\n};\n\nconst findSiblingSquareToCheck: FindSiblingSquareToCheck = (field, row, column, owner ) => {\n    const squares = [];\n\n    if (field[row] && field[row][column]) {\n        if (field[row][column].owner === owner) {\n            squares.push(\n                {\n                    row,\n                    column: column,\n                }\n            )\n        }\n    }\n\n    if (field[row] && field[row][column - 1]) {\n        if (field[row][column - 1].owner === owner) {\n            squares.push(\n                {\n                    row,\n                    column: column - 1,\n                }\n            )\n        }\n    }\n\n    if (field[row] && field[row][column + 1]) {\n        if (field[row][column + 1].owner === owner) {\n            squares.push(\n                {\n                    row,\n                    column: column + 1,\n                }\n            )\n        }\n    }\n    if (field[row - 1] && field[row - 1][column]) {\n        if (field[row - 1][column].owner === owner) {\n            squares.push(\n                {\n                    row: row - 1,\n                    column,\n                }\n            )\n        }\n    }\n    if (field[row + 1] && field[row + 1][column]) {\n        if (field[row + 1][column].owner === owner) {\n            squares.push(\n                {\n                    row: row + 1,\n                    column,\n                }\n            )\n        }\n    }\n\n    return squares;\n};\n\n\nconst checkSquare: CheckSquare = (field, row, column, owner, visited= []) => {\n\n    const isVisited: IsVisited = (row, column) => {\n        if (visited.length) {\n            return !!visited.filter(visitedSquare => {\n                return visitedSquare.row === row && visitedSquare.column === column;\n            }).length;\n        }\n        return false;\n    };\n\n    const existedSiblings = findSiblingSquareToCheck(field, row, column, owner);\n\n    existedSiblings.forEach(existedSibling => {\n        const { row, column } = existedSibling;\n        if (!isVisited(row, column)) {\n            visited.push(existedSibling);\n            checkSquare(field, row, column, owner, visited);\n        }\n    });\n\n    return visited.length;\n};\n\nexport const calcResults = (field: Field) => {\n\n    const score = [0, 0];\n\n    field.forEach((row, rowKey) => {\n        row.forEach((column, columnKey) => {\n            if (typeof column.owner !== 'undefined') {\n                const distance = checkSquare(field, rowKey, columnKey, column.owner);\n                if (distance > score[column.owner]) {\n                    score[column.owner] = distance;\n                }\n            }\n        });\n    });\n\n    const [player1score, player2score] = score;\n\n    let win = '';\n    let tie = false;\n\n    if (player2score === player1score) {\n        tie = true;\n    }\n\n    if (!tie) {\n        win = player1score > player2score ? 'Player 1' : 'Player 2';\n    }\n\n    return {\n        win,\n        tie,\n        score\n    }\n};\n","import React from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport {DialogContentText, DialogTitle} from \"@material-ui/core\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport {DialogComponent} from \"../types\";\n\nconst Modal: DialogComponent = (props) => {\n\n    const {startGame, dialogOpen, content, title, newGameForm } = props;\n\n    return (\n        <Dialog\n            onClose={startGame}\n            open={dialogOpen}\n        >\n            <DialogTitle>\n                {title}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    {content}\n                    <br/>\n                    {newGameForm}\n                </DialogContentText>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {DialogActions} from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport {NewGameComponent} from \"./types\";\n\nconst ViewNewGameForm: NewGameComponent = (props) => {\n\n    const {fieldSizeError, fieldSize, changeFieldSize, startGame} = props;\n\n    return (\n        <>\n            <TextField\n                margin=\"dense\"\n                label=\"Field size\"\n                type=\"number\"\n                error={!!fieldSizeError.length}\n                value={fieldSize}\n                onChange={changeFieldSize}\n                helperText={fieldSizeError}\n                fullWidth\n                inputProps={{min: \"2\", max: \"8\", step: \"1\"}}\n            />\n            <DialogActions>\n                <Button onClick={startGame} color=\"primary\">\n                    Start!\n                </Button>\n            </DialogActions>\n        </>\n    )\n};\n\nexport default ViewNewGameForm;\n","import React from \"react\";\nimport {ContentComponent} from \"../types\";\n\nconst Content: ContentComponent = (props) => {\n\n    const {isNewGame, result} = props;\n\n    return isNewGame ?\n        <>\n            Choose the size of field:\n        </>\n        :\n        <>\n            <div style={{color: 'green'}}>Player 1 got {result.score[0]} squares </div>\n            <div style={{color: 'red'}}>Player 2 got {result.score[1]} squares </div>\n            <br/>\n            <div>\n                {result.tie && <div>It's a tie! Try again to find out who's better!</div>}\n                {!result.tie && <div><b>Congratulations! {result.win} wins!</b></div>}\n            </div>\n        </>;\n};\n\nexport default Content;\n","import React, {ChangeEvent, useState} from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport ViewBoard from \"./Components/ViewBoard\";\nimport {calcResults, generateField, isGameFinished} from \"./utils\";\nimport {AppState, ChangeColor, Player} from \"./types\";\nimport Modal from \"./Components/Dialog/Modal\";\nimport ViewNewGameForm from \"./Components/ViewNewGameForm\";\nimport Content from \"./Components/Dialog/Content\";\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n        color: theme.palette.text.secondary,\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\n\nexport default function App() {\n\n    const initialState = {\n        fieldSize: 3,\n        fieldSizeError: '',\n        currentPlayer: Player.One,\n        result: {\n            tie: false,\n            win: '',\n            score: [0, 0],\n        },\n        dialogOpen: true,\n        isNewGame: true,\n    };\n\n    const [state, setState ] = useState<AppState>(initialState);\n\n    const changeColor: ChangeColor = (square, player) => () => {\n        if (typeof square.owner === 'undefined') {\n            square.owner = player;\n            setState({\n                ...state,\n                currentPlayer: player === Player.One ? Player.Two : Player.One,\n            });\n\n            if (state.field) {\n                if (isGameFinished(state.field)) {\n                    const result = calcResults(state.field);\n\n                    setState({\n                        ...state,\n                        dialogOpen: true,\n                        isNewGame: false,\n                        result,\n                    })\n                }\n            }\n        }\n    };\n\n    const startGame = () => {\n        setState({\n            ...state,\n            dialogOpen: false,\n            currentPlayer: Player.One,\n            field: generateField(state.fieldSize),\n        })\n    };\n\n    const changeFieldSize = (event: ChangeEvent<HTMLInputElement>) => {\n        const fieldSize = Number(event.target.value);\n        if (fieldSize < 2 || fieldSize > 8) {\n            setState({\n                ...state,\n                fieldSizeError: 'Field size has to be between 2 and 8'\n            });\n        } else {\n            setState({\n                ...state,\n                fieldSize\n           });\n        }\n    };\n\n    const classes = useStyles();\n\n    const { result, dialogOpen, fieldSizeError, fieldSize, isNewGame, field, currentPlayer } = state;\n\n    return (\n        <Container component=\"main\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                {\n                    field &&\n                    <>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Squares\n                        </Typography>\n                        <ViewBoard\n                            field={field}\n                            currentPlayer={currentPlayer}\n                            changeColor={changeColor}\n                        />\n                    </>\n                }\n                <Modal\n                    title={ !isNewGame ? 'That\\'s all folks!' : 'New game' }\n                    dialogOpen={dialogOpen}\n                    startGame={startGame}\n                    content={\n                        <Content\n                            isNewGame={isNewGame}\n                            result={result}\n                        />\n                    }\n                    newGameForm={\n                        <ViewNewGameForm\n                            startGame={startGame}\n                            changeFieldSize={changeFieldSize}\n                            fieldSizeError={fieldSizeError}\n                            fieldSize={fieldSize}\n                        />\n                    }\n                >\n                </Modal>\n            </div>\n        </Container>\n    )\n}\n","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#556cd6',\n    },\n    secondary: {\n      main: '#19857b',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport App from './App';\nimport theme from './theme';\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n"],"sourceRoot":""}